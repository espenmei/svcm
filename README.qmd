---
title: "svcm"
format: gfm
editor:
  canonical: true
---

**svcm** is an R-package intended for (relatively) easy specification of models combining structural equation models with sparse relationship matrices. The structural equations model involve unknown parameters that describe dependence across variables. The relationship matrix may for example encode genetic relatedness or different forms of shared environments and describe dependence across individuals. The interface is inspired by **OpenMx**, but uses the **Matrix** package for computation.

## An example

Consider a factor model for individual $j$

$$
\boldsymbol{y}_j = \boldsymbol{\beta}+\boldsymbol{\lambda}\eta_j+\boldsymbol{\delta}_j.
$$

$\boldsymbol{\beta}$ is a vector of intercepts, $\boldsymbol{\lambda}$ is a vector of loadings on the common factor $\eta_j$, and $\boldsymbol{\delta}_j$ a vector of specific factors with diagonal covariance matrix $\mathbf{\Theta}$. The factor model describes dependence across variables. The common factor is specified with a genetic and environmental component

$$
\eta_j = a_j + e_j.
$$

The genetic components $a_j$ represent an additive polygenic contribution to the common factor and has covariance matrix $\sigma^2_a\bf{A}$. $\bf{A}$ is a sparse symmetric matrix describing genetic relatedness among individuals. When $\bf{A}$ cannot be arranged into small homogeneous blocks, this model cannot be expressed in common software for structural equation models. The environmental component is independent across individuals with covariance matrix $\sigma^2_e\bf{I}$. The model could also be written for the whole sample as

$$
\bf{Y} = \boldsymbol{x\beta}'+
\boldsymbol{\eta}\boldsymbol{\lambda}'+ \bf{\Delta}.
$$

Across variables and individuals, the covariance matrix implied by this model can be described as

$$
(\boldsymbol{\lambda\lambda'}\sigma^2_a)\otimes\bf{A}+
(\boldsymbol{\lambda\lambda'}\sigma^2_e+\bf{\Theta})\otimes\bf{I}.
$$

### Simulate data

Below is a simulation of data from the model.
```{r simulate2}
# Genetic relationships
str1 <- matrix(c(1, 1/4, 1/4, 1/4, 1, 1/2, 1/4, 1/2, 1), 3, 3)
str2 <- matrix(c(1, 1/2, 1/8, 1/8, 1/2, 1, 1/8, 1/8, 1/8, 1/8, 1, 1/2, 1/8, 1/8, 1/2, 1), 4, 4)
# Genetic relationship matrix
A <- Matrix::bdiag(Matrix::bdiag(replicate(100, str1, simplify = FALSE)),
                   Matrix::bdiag(replicate(100, str2, simplify = FALSE)))
L <- chol(A)
N <- nrow(A)
a <- sqrt(2) * t(L) %*% rnorm(N)
e <- rnorm(N, 0, sqrt(2))
eta <- a + e
l <- c(1, 0.5, 0.5, 0.8)
b = c(2, 2, 4, 4)
del <- matrix(rnorm(N * 4), N, 4)
x <- rep(1, N)
Y <- x %*% t(b) + eta %*% t(l) + del
```


### Fit the model

There are several ways to fit this model using **svcm**, but it will likely be somewhat similar to the example below. `pm()` is used to define matrices of parameters, $\boldsymbol{\lambda}$, $\boldsymbol{\beta}$, $\sigma^2_a$, $\sigma^2_e$, and $\bf \Theta$. `svc()` is used to define structured variance components, the terms defining the covariance matrix. Notice that the first argument is an expression defining the model implied covariance structure across variables as a function of parameters. The second argument `R =` is used to supply a relationship matrix describing the dependence across individuals. `mc()` is used to define the mean structure. The first argument is an expression involving parameters and the second argument `X = ` gives a model matrix of covariates. There is no limit to how many `pm`, `svc` and `mc` objects that can be supplied, they will be added together to form the total mean and covariance structure.

```{r fit1}
library(svcm)
# Environmental relationship matrix
I <- Matrix::Diagonal(N)
m1 <- svcm(
  #Data
  Y,
  # Parameters
  pm(nrow = 4, ncol = 1, labels = paste0("l", 1:4), free = c(F, T, T, T), values = c(1, 0.5, 0.5, 0.5), name = "l"),
  pm(nrow = 1, ncol = 1, labels = "Sa1", free = T, values = 1, name = "Sa"),
  pm(nrow = 1, ncol = 1, labels = "Se1", free = T, values = 1, name = "Se"),
  pm(nrow = 4, ncol = 4, labels = sapply(1:4, function(x) paste0("th", 1:4, x)), free = diag(T, 4), values = diag(4), name = "TH"),
  pm(nrow = 4, ncol = 1, labels = paste0("b", 1:4), free = T, values = 0, name = "b"),
  # Variance components
  svc(l %*% Sa %*% t(l), R = A),
  svc(l %*% Se %*% t(l) + TH, R = I),
  # Mean components
  mc(b, X = x)
)
```

After the model is defined, it can be fitted using `fit_svcm()`.

```{r fit}
m1 <- fit_svcm(m1, se = TRUE, control = list(trace = 10))
```

After the models is fitted, it can be inspected with `summary()`.

```{r look}
summary(m1)
```

## In general
**svcm** can fit models where the covariance matrix can be described as

$$
\bf{V}=\sum_{i=1}^{q}\mathbf \Sigma_i \otimes \mathbf R_i.
$$

The terms in the sum are specified by adding objects returned from `svc()` to the model. $\mathbf \Sigma_i$ has dimension according to the number of columns of $\bf{Y}$ and describes dependence among variables. $\mathbf \Sigma_i$ is a function of parameters defined with `pm()` and can be specified flexibly using general functions available in **R**. $\mathbf R_i$ describe dependence across individuals and must be sparse symmetric matrices with known values.

The means are described with a similar structure

$$
\bf M =\sum_{i=1}^{p} \mathbf X_i \mathbf B_i^{'}.
$$

For the means, the terms in the sum are specified by adding objects returned from `mc()` to the model. $\mathbf B_i^{'}$ has rows equal to the number of columns of $\bf Y$, and columns equal to the columns of $\mathbf X_i$.

The data is described with the normal distribution

$$
vec(\bf Y)\sim\mathcal{N}(vec(M),V).
$$

